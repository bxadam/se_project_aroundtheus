!function(){"use strict";class e{constructor(e,t,s,n,i){let{name:r,link:o,_id:a,isLiked:l}=e;this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=n,this._handleLikeClick=i,this._name=r,this._link=o,this._id=a,this._isLiked=l,this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImageElement=this._cardElement.querySelector(".card__image"),this._cardTitle=this._cardElement.querySelector(".card__title"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button")}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this)})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._cardImageElement.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}handleLikeClick=()=>{this._likeButton.classList.toggle("card__like-button_active")};delete=()=>{this._cardElement.remove()};getView(){return this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this._cardTitle.textContent=this._name,this._isLiked&&this._likeButton.classList.add("card__like-button_active"),this._setEventListeners(),this._cardElement}}class t{constructor(e,t){let{items:s,renderer:n}=e;this._container=t,this._items=s,this._renderer=n}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}class s{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._closeButton=this._popupElement.querySelector(".modal__close")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keyup",this._handleEscClose),this._popupElement.addEventListener("click",this._handleOverlayClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keyup",this._handleEscClose),this._popupElement.removeEventListener("click",this._handleOverlayClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};_handleOverlayClose=e=>{e.target.classList.contains("modal_opened")&&this.close()};setEventListeners(){this._closeButton.addEventListener("click",(()=>{this.close()}))}}class n extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this.inputList=this._popupForm.querySelectorAll(".modal__input"),this.submitButton=this._popupForm.querySelector(".modal__save-button")}_getInputValues(){const e={};return this.inputList.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this.close()})),super.setEventListeners()}setloading(e,t){this.submitButton.textContent=e?"Saving...":t}}var i=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);this._formElement.classList.remove(this._errorClass),t.textContent="",t.classList.remove(this._errorClass)}_hasInvalidInput(){return this._inputElements.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():this.enableButton()}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_setEventListeners(){this._inputElements=[...this._formElement.querySelectorAll(this._inputSelector)],this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this.disableButton()})),this._setEventListeners(),this.disableButton()}};const r={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__save-button_disabled",inputErrorClass:"modal__input_error",errorClass:"modal__error_visible"},o=document.querySelector("#profile-edit-btn"),a=document.querySelector("#profile-title-input"),l=document.querySelector("#profile-subtext-input"),c=document.querySelector("#profile-modal-form"),d=document.querySelector("#add-button"),h=document.querySelector("#avatar-edit-btn"),u=document.querySelector("#new-card-modal-form"),_=document.querySelector("#avatar-modal-form"),m=document.querySelector(".cards__list"),p=new i(r,c),v=new i(r,u),E=new i(r,_);p.enableValidation(),v.enableValidation(),E.enableValidation();const S=t=>{const s=new e(t,"#card-template",B,w,q).getView();f.addItem(s)},b=new class{constructor(e){this._url=e.baseUrl,this._headers=e.headers,this._avatar=e.avatar}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}async getInitialCards(){const e=await fetch("https://around-api.en.tripleten-services.com/v1/cards",{headers:this._headers});return this._checkResponse(e)}async getUserInfo(){const e=await fetch("https://around-api.en.tripleten-services.com/v1/users/me",{headers:this._headers});return this._checkResponse(e)}async setUserInfo(e){const t=await fetch("https://around-api.en.tripleten-services.com/v1/users/me",{method:"PATCH",headers:this._headers,body:JSON.stringify(e)});return this._checkResponse(t)}async setAvatar(e){const t=await fetch("https://around-api.en.tripleten-services.com/v1/users/me/avatar",{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.link})});return this._checkResponse(t)}async addCard(e){let{name:t,link:s}=e;const n=await fetch("https://around-api.en.tripleten-services.com/v1/cards/",{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})});return this._checkResponse(n)}async deleteCard(e){const t=await fetch(`https://around-api.en.tripleten-services.com/v1/cards/${e}`,{method:"DELETE",headers:this._headers});return this._checkResponse(t)}async likeCard(e,t){const s=t?"DELETE":"PUT",n=await fetch(`https://around-api.en.tripleten-services.com/v1/cards/${e}/likes`,{method:s,headers:this._headers});return this._checkResponse(n)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"03a6e48e-c1e2-40b5-8f26-406bbefbcb53","Content-Type":"application/json"}});let f;b.getInitialCards().then((e=>{f=new t({items:e.reverse(),renderer:S},m),f.renderItems()})),b.getUserInfo().then((e=>{I.setUserInfo(e),I.setAvatar(e.avatar)}));const k=new n("#profile-edit-modal",(function(e){k.setloading(!0,"Saving..."),b.setUserInfo(e).then((e=>{I.setUserInfo(e)})).catch((e=>{console.log(e)})).finally((()=>{k.setloading(!1,"Save")})),I.getUserInfo(e.name,e.about)}));k.setEventListeners();const y=new n("#new-card-modal",(function(e){y.setloading(!0,"Saving..."),b.addCard({name:e.title,link:e.link}).then((e=>{S(e)})).catch((e=>{console.log(e)})).finally((()=>{y.setloading(!1,"Create")})),u.reset()}));y.setEventListeners();const L=new n("#avatar-modal",(function(e){L.setloading(!0,"Saving..."),b.setAvatar(e).then((e=>{I.setAvatar(e.avatar)})).catch((e=>{console.log(e)})).finally((()=>{L.setloading(!1,"Save")})),_.reset(),L.close()}));L.setEventListeners();const g=new class extends s{constructor(e){super({popupSelector:e}),this._form=this._popupElement.querySelector(".modal__form"),this._button=this._form.querySelector(".modal__save-button"),this.submitButton=this._form.querySelector(".modal__save-button")}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()}))}setSubmitHandler(e){this._handleFormSubmit=e}setloading(e,t){this._button.textContent=e?"Saving...":t}}("#confirm-modal");g.setEventListeners();const C=new class extends s{constructor(e){super({popupSelector:e}),this._image=this._popupElement.querySelector(".modal__image"),this._caption=this._popupElement.querySelector(".modal__description")}open(e){let{link:t,name:s}=e;this._caption.textContent=s,this._image.src=t,this._image.alt=s,super.open()}}("#preview-modal");C.setEventListeners();const I=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:n}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s),this._avatarElement=document.querySelector(n)}getUserInfo(){return{name:this._nameElement.textContent,about:this._jobElement.textContent}}setUserInfo(e){let{name:t,about:s}=e;this._nameElement.textContent=t,this._jobElement.textContent=s}setAvatar(e){this._avatarElement.src=e}}({nameSelector:".profile__title",jobSelector:".profile__subtext",avatarSelector:".profile__picture"});function B(e){C.open(e)}function q(e){b.likeCard(e._id,e._isLiked).then((()=>{e.handleLikeClick()})).catch((e=>{console.log(e)}))}function w(e){g.open(),g.setSubmitHandler((()=>{b.deleteCard(e._id).then((()=>{e.delete(),g.close()})).catch((e=>{console.log(e)}))}))}o.addEventListener("click",(()=>{const{name:e,about:t}=I.getUserInfo();a.value=e,l.value=t,k.open()})),d.addEventListener("click",(()=>{y.open()})),h.addEventListener("click",(()=>{L.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,